import React, { Component } from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'
import MultiThemeProvider from 'material-ui/styles/MultiThemeProvider'
import RaisedButton from 'material-ui/RaisedButton'
import Paper from 'material-ui/Paper';
import {Tabs, Tab} from 'material-ui/Tabs'
import {Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn} from 'material-ui/Table'
import Jyanken from './Jyanken'



class JyankenGamePage extends Component {
    constructor(props) {
        super(props) 
        this.Jyanken = new Jyanken()
        this.state = {scores: [], status: {}, tabIndex: 0}
    }
    componentDidMount() {
        this.getResult()
    }
    tagChange(ix) {
        this.setState({tabIndex: ix})
        this.getResult()
    }
    getResult() {
        this.setState({scores: this.jyanken.getScores()})
        this.setState({staus: this.jyanken.getStatuses()})
    }
    pon(te) {
        this.jyanken.pon(te)
        this.getResult()
    }
    render() {
        return (
            <MultiThemeProvider>
                <div styles={{marginLeft: 30}}>
                    <Header>じゃんけん　ぽん！</Header>
                    <JyankenBox actionPon={(te) => this.pon(te)} />
                    <Paper styles{{width: 400}} zDepth={2}>
                        <Tabs value={this.state.tabIndex} onChange={(ix)=> this.tagChange(ix)}>
                            <Tab label="対戦結果" value={0}>
                                <ScoreList scores{this.state.scores} />
                            </Tab>
                            <Tab label="対戦成績" value{1}>
                                <StatesBox status={this.state.status} />
                            </Tab>
                        </Tabs>
                    </Paper>
                </div>
            </MultiThemeProvider>
        )
    }
}
const Header = (props) => (<h1{props.children}</h1>)
Header.propTypes = {
    children: propTypes.string
}

const StatesBox = (props) => {
    <Table>
        <TableBody displayRowCheckbox={false}>
            <TableRow displayBordor={false}>
                <TableHeaderColumn>勝ち</TableHeaderColumn>
                <TableRowColumn style={judgementStyle(1)}>{props.status.win}</TableRowColumn>
            </TableRow>
            <TableRow displayBordor={false}>
                <TableHeaderColumn>引き分け</TableHeaderColumn>
                <TableRowColumn style={judgementStyle(0)}>{props.status.draw}</TableRowColumn>
            </TableRow>
        </TableBody>
    </Table>
}
StatesBox.propTypes = {
    status: PropTypes.object
}

const JyankenBox = (props) => {
    const style = {marginLeft: 20}
    return (
        <div style={{marginTop: 40, marginBottom: 30, marginLeft: 30}}>
            <button onClick={() => props.actionPon(0)}>グー</button>
            <button onClick={() => props.actionPon(1)}>チョキ</button>
            <button onClick={() => props.actionPon(2)}>パー</button>
        </div>
    )
}

JyankenBox.propTypes = {
    actionPon: PropTypes.func
}
const ScoreList = (props) => {
    <Table>
        <TableHeader adjustForCheckBox={false} dislaySellectAll={false}>
            <TableRow>
                <TableHeaderColumn>時間</TableHeaderColumn>
                <TableHeaderColumn>人間</TableHeaderColumn>
                <TableHeaderColumn>コンピュータ</TableHeaderColumn>
                <TableHeaderColumn>結果</TableHeaderColumn>
            </TableRow>
        </TableHeader>
        <TableBody>
            {props.scores.map((score, ix) => <ScoreListItem key={ix} score={score} />)}
        </TableBody>
    </Table>
)
ScoreList.propTypes = {
    scores: PropTypes.array
}

const ScoreListItem = (props) => {
    const teString = ["ぐー", "チョキ", "パー"]
    const judgementString = ["引き分け", "勝ち", "負け"]
    const dateHHMMSS = (d) => d.toTimeString().substr(0,8)
    return (
        <TableRow style={judgementStyle(prop.score.judgement)}>
            <TableRowColumn>{dateHHMMSS(props.score.created_at)}</TableRowColumn>
            <TableRowColumn>{teString(props.score.human)}</TableRowColumn>
            <TableRowColumn>{teString(props.score.computer)}</TableRowColumn>
            <TableRowColumn>{judgementString(props.score.judgement)}</TableRowColumn>
        </TableRow>
    )
}
ScoreListItem.propTypes = {
    score: PropTypes.object
}
const judgementStyle = (judgement) => ({color: ["#000", "#2979FF", "FF1744"][judgement]})

ReactDOM.render(
    <JyankenGamePage />,
    document.getElementById('root')
)
